$date
	Tue Oct 28 21:31:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb $end
$var wire 16 ! psum_out [15:0] $end
$var reg 4 " a0 [3:0] $end
$var reg 4 # a1 [3:0] $end
$var reg 4 $ a2 [3:0] $end
$var reg 4 % a3 [3:0] $end
$var reg 4 & b0 [3:0] $end
$var reg 4 ' b1 [3:0] $end
$var reg 4 ( b2 [3:0] $end
$var reg 4 ) b3 [3:0] $end
$var reg 16 * c [15:0] $end
$var reg 1 + clk $end
$var reg 16 , expected_out [15:0] $end
$var integer 32 - i [31:0] $end
$var integer 32 . w0_dec [31:0] $end
$var integer 32 / w1_dec [31:0] $end
$var integer 32 0 w2_dec [31:0] $end
$var integer 32 1 w3_dec [31:0] $end
$var integer 32 2 w_file [31:0] $end
$var integer 32 3 w_scan_file [31:0] $end
$var integer 32 4 x0_dec [31:0] $end
$var integer 32 5 x1_dec [31:0] $end
$var integer 32 6 x2_dec [31:0] $end
$var integer 32 7 x3_dec [31:0] $end
$var integer 32 8 x_file [31:0] $end
$var integer 32 9 x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 4 : a0 [3:0] $end
$var reg 5 ; a0_invert [4:0] $end
$var reg 4 < a1 [3:0] $end
$var reg 5 = a1_invert [4:0] $end
$var reg 4 > a2 [3:0] $end
$var reg 5 ? a2_invert [4:0] $end
$var reg 4 @ a3 [3:0] $end
$var reg 5 A a3_invert [4:0] $end
$var reg 4 B b0 [3:0] $end
$var reg 4 C b1 [3:0] $end
$var reg 4 D b2 [3:0] $end
$var reg 4 E b3 [3:0] $end
$var reg 16 F c [15:0] $end
$var reg 16 G mac_predicted [15:0] $end
$var reg 8 H pd_0 [7:0] $end
$var reg 8 I pd_1 [7:0] $end
$var reg 8 J pd_2 [7:0] $end
$var reg 8 K pd_3 [7:0] $end
$var reg 9 L sum_0 [8:0] $end
$var reg 9 M sum_1 [8:0] $end
$upscope $end
$scope function w_bin $end
$var reg 4 N w_bin [3:0] $end
$var integer 32 O weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var reg 4 P x_bin [3:0] $end
$var integer 32 Q act [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 R a0 [3:0] $end
$var wire 4 S a1 [3:0] $end
$var wire 4 T a2 [3:0] $end
$var wire 4 U a3 [3:0] $end
$var wire 4 V b0 [3:0] $end
$var wire 4 W b1 [3:0] $end
$var wire 4 X b2 [3:0] $end
$var wire 4 Y b3 [3:0] $end
$var wire 16 Z c [15:0] $end
$var wire 1 + clk $end
$var wire 16 [ out [15:0] $end
$var reg 4 \ a0_q [3:0] $end
$var reg 4 ] a1_q [3:0] $end
$var reg 4 ^ a2_q [3:0] $end
$var reg 4 _ a3_q [3:0] $end
$var reg 4 ` b0_q [3:0] $end
$var reg 4 a b1_q [3:0] $end
$var reg 4 b b2_q [3:0] $end
$var reg 4 c b3_q [3:0] $end
$var reg 16 d c_q [15:0] $end
$scope module mac_instance $end
$var wire 4 e a0 [3:0] $end
$var wire 4 f a1 [3:0] $end
$var wire 4 g a2 [3:0] $end
$var wire 4 h a3 [3:0] $end
$var wire 4 i b0 [3:0] $end
$var wire 4 j b1 [3:0] $end
$var wire 4 k b2 [3:0] $end
$var wire 4 l b3 [3:0] $end
$var wire 16 m c [15:0] $end
$var wire 5 n b3_sign [4:0] $end
$var wire 5 o b2_sign [4:0] $end
$var wire 5 p b1_sign [4:0] $end
$var wire 5 q b0_sign [4:0] $end
$var wire 5 r a3_sign [4:0] $end
$var wire 5 s a2_sign [4:0] $end
$var wire 5 t a1_sign [4:0] $end
$var wire 5 u a0_sign [4:0] $end
$var reg 16 v out [15:0] $end
$var reg 8 w pd_0_mac [7:0] $end
$var reg 8 x pd_1_mac [7:0] $end
$var reg 8 y pd_2_mac [7:0] $end
$var reg 8 z pd_3_mac [7:0] $end
$var reg 9 { sum_0_mac [8:0] $end
$var reg 9 | sum_1_mac [8:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx |
bx {
bx z
bx y
bx x
bx w
bx v
b0xxxx u
b0xxxx t
b0xxxx s
b0xxxx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b10000000000000000000000000000100 8
bx 7
bx 6
bx 5
bx 4
bx 3
b10000000000000000000000000000011 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
0+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
1+
#3
b0 -
0+
#4
1+
#5
b1 -
b1111111111010000 ,
b1111111111010000 G
b111111011 M
b111010101 L
b11110100 K
b111 J
b11001111 I
b110 H
b11 A
b1 ?
b111 =
b110 ;
b110 :
b111 <
b1 >
b11 @
b1 B
b1001 C
b111 D
b1100 E
b0 F
b0 *
b0 Z
b1100 )
b1100 Y
b11 %
b11 U
b111 (
b111 X
b1 $
b1 T
b1001 '
b1001 W
b111 #
b111 S
b1 &
b1 V
b1100 N
b0 O
b110 "
b110 R
b11 P
b0 Q
b11 7
b1 6
b111 5
b1 9
b110 4
b11111111111111111111111111111100 1
b111 0
b11111111111111111111111111111001 /
b1 3
b1 .
0+
#6
b1111111111010000 !
b1111111111010000 [
b1111111111010000 v
b111111011 |
b111010101 {
b11110100 z
b111 y
b11001111 x
b110 w
b0 d
b0 m
b11 r
b11 _
b11 h
b11100 n
b1100 c
b1100 l
b1 s
b1 ^
b1 g
b111 o
b111 b
b111 k
b111 t
b111 ]
b111 f
b11001 p
b1001 a
b1001 j
b110 u
b110 \
b110 e
b1 q
b1 `
b1 i
1+
#7
b10 -
b1111111110011110 ,
b1111111110011110 G
b111011000 M
b111110110 L
b10100 K
b11000100 J
b11111100 I
b11111010 H
b100 A
b1111 ?
b10 =
b10 ;
b10 :
b10 <
b1111 >
b100 @
b1101 B
b1110 C
b1100 D
b101 E
b1111111111010000 F
b1111111111010000 *
b1111111111010000 Z
b101 )
b101 Y
b100 %
b100 U
b1100 (
b1100 X
b1111 $
b1111 T
b1110 '
b1110 W
b10 #
b10 S
b1101 &
b1101 V
b101 N
b1 O
b10 "
b10 R
b100 P
b0 Q
b100 7
b1111 6
b10 5
b10 4
b101 1
b11111111111111111111111111111100 0
b11111111111111111111111111111110 /
b11111111111111111111111111111101 .
0+
#8
b1111111110011110 !
b1111111110011110 [
b1111111110011110 v
b111011000 |
b111110110 {
b10100 z
b11000100 y
b11111100 x
b11111010 w
b1111111111010000 d
b1111111111010000 m
b100 r
b100 _
b100 h
b101 n
b101 c
b101 l
b1111 s
b1111 ^
b1111 g
b11100 o
b1100 b
b1100 k
b10 t
b10 ]
b10 f
b11110 p
b1110 a
b1110 j
b10 u
b10 \
b10 e
b11101 q
b1101 `
b1101 i
1+
#9
b11 -
b1111111110000110 ,
b1111111110000110 G
b111111100 M
b111101100 L
b11111100 K
b0 J
b10000 I
b11011100 H
b10 A
b0 ?
b100 =
b110 ;
b110 :
b100 <
b0 >
b10 @
b1010 B
b100 C
b10 D
b1110 E
b1111111110011110 F
b1111111110011110 *
b1111111110011110 Z
b1110 )
b1110 Y
b10 %
b10 U
b10 (
b10 X
b0 $
b0 T
b100 '
b100 W
b100 #
b100 S
b1010 &
b1010 V
b1110 N
b0 O
b110 "
b110 R
b10 P
b0 Q
b10 7
b0 6
b100 5
b110 4
b11111111111111111111111111111110 1
b10 0
b100 /
b11111111111111111111111111111010 .
0+
#10
b1111111110000110 !
b1111111110000110 [
b1111111110000110 v
b111111100 |
b111101100 {
b11111100 z
b0 y
b10000 x
b11011100 w
b1111111110011110 d
b1111111110011110 m
b10 r
b10 _
b10 h
b11110 n
b1110 c
b1110 l
b0 s
b0 ^
b0 g
b10 o
b10 b
b10 k
b100 t
b100 ]
b100 f
b100 p
b100 a
b100 j
b110 u
b110 \
b110 e
b11010 q
b1010 `
b1010 i
1+
#11
b100 -
b1111111101011001 ,
b1111111101011001 G
b111111011 M
b111011000 L
b11110101 K
b110 J
b11011000 I
b0 H
b1011 A
b10 ?
b1010 =
b1 ;
b1 :
b1010 <
b10 >
b1011 @
b0 B
b1100 C
b11 D
b1111 E
b1111111110000110 F
b1111111110000110 *
b1111111110000110 Z
b1111 )
b1111 Y
b1011 %
b1011 U
b11 (
b11 X
b10 $
b10 T
b1100 '
b1100 W
b1 O
b1010 #
b1010 S
b0 &
b0 V
b1111 N
b1 "
b1 R
b1011 P
b0 Q
b1011 7
b10 6
b1010 5
b1 4
b11111111111111111111111111111111 1
b11 0
b11111111111111111111111111111100 /
b0 .
0+
#12
b1111111101011001 !
b1111111101011001 [
b1111111101011001 v
b111111011 |
b111011000 {
b11110101 z
b110 y
b11011000 x
b0 w
b1111111110000110 d
b1111111110000110 m
b1011 r
b1011 _
b1011 h
b11111 n
b1111 c
b1111 l
b10 s
b10 ^
b10 g
b11 o
b11 b
b11 k
b1010 t
b1010 ]
b1010 f
b11100 p
b1100 a
b1100 j
b1 u
b1 \
b1 e
b0 q
b0 `
b0 i
1+
#13
b101 -
b1111111101111111 ,
b1111111101111111 G
b10000 M
b10110 L
b101000 K
b11101000 J
b11110 I
b11111000 H
b1010 A
b100 ?
b110 =
b10 ;
b10 :
b110 <
b100 >
b1010 @
b1100 B
b101 C
b1010 D
b100 E
b1111111101011001 F
b1111111101011001 *
b1111111101011001 Z
b100 )
b100 Y
b1010 %
b1010 U
b1010 (
b1010 X
b100 $
b100 T
b101 '
b101 W
b110 #
b110 S
b1100 &
b1100 V
b100 N
b0 O
b10 "
b10 R
b1010 P
b0 Q
b1010 7
b100 6
b110 5
b10 4
b100 1
b11111111111111111111111111111010 0
b101 /
b11111111111111111111111111111100 .
0+
#14
b1111111101111111 !
b1111111101111111 [
b1111111101111111 v
b10000 |
b10110 {
b101000 z
b11101000 y
b11110 x
b11111000 w
b1111111101011001 d
b1111111101011001 m
b1010 r
b1010 _
b1010 h
b100 n
b100 c
b100 l
b100 s
b100 ^
b100 g
b11010 o
b1010 b
b1010 k
b110 t
b110 ]
b110 f
b101 p
b101 a
b101 j
b10 u
b10 \
b10 e
b11100 q
b1100 `
b1100 i
1+
#15
0+
#25
